{"version":3,"sources":["pages/todolists/Todolist/TodoList.module.css","api/todolists-api.ts","reportWebVitals.ts","api/settings.ts","api/auth-api.tsx","state/app-reducer.ts","helpers/error-handlers.ts","state/auth-reducer.ts","state/tasks-reducer.ts","state/todolists-reducer.ts","state/store.ts","components/Header.tsx","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","pages/todolists/Todolist/Task/Task.tsx","pages/todolists/Todolist/TodoList.tsx","pages/todolists/Todolists.tsx","components/ErrorSnackBar/ErrorSnackBar.tsx","components/ProgressLine/ProgressLine.tsx","components/ViewMessage/ViewMessage.tsx","pages/Login/Login.tsx","components/CircularPreloader/CircularPreloader.tsx","app/App.tsx","index.tsx"],"names":["module","exports","TaskStasuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","authAPI","authData","post","delete","get","initialState","status","error","isInicialized","setAppStatusAC","type","setAppErrorAC","HandleAppServerError","data","dispatch","messages","length","HandleAppNetworkError","message","isLoggedIn","setIsLoggedInAC","todolistsAPI","title","todoListId","put","taskID","model","updateTaskTC","domainModel","getState","task","tasks","find","id","Error","modelApi","description","priority","startDate","deadline","resultCode","updateTaskAC","catch","rootReducer","combineReducers","todolists","state","action","filter","todolist","entityStatus","map","newTodolistTitle","td","newTask","copyState","forEach","app","auth","store","createStore","applyMiddleware","thunkMiddleware","window","Header","useDispatch","useSelector","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Button","onClick","AddItemForm","props","console","log","React","useState","setError","value","setValue","onAddItemHandler","trim","addItem","TextField","disabled","variant","label","helperText","onChange","event","currentTarget","onKeyPress","charCode","AddBox","memo","EditableSpan","editMode","setEditMode","autoFocus","onBlur","changeItemTitle","onDoubleClick","Task","changeTaskTitle","useCallback","onCrossClickHandler","removeTask","changeTaskStatusHandler","changeTaskStatus","Completed","New","className","Checkbox","checked","Delete","TodoList","useEffect","setTasksAC","items","onRemoveTodolist","removeTodolist","changeFilter","onAllClickHandler","onActiveClickHandler","onComplitedClickHandler","addTask","inputValue","changeTodolistTitleHandler","changeTodolistTitle","s","todolist__block","Todolists","removeTaskAC","removeTaskTC","changeTodolistFilterAC","item","AddTaskTC","changeTodolistEntityStatusAC","removeTodolistAC","deleteTodolistTC","addNewTodolist","newTitle","createTodolistTC","changeTodolistTitleAC","updateTodolistTitleTC","Grid","container","style","padding","spacing","tl","tasksForTodolist","Paper","to","Alert","elevation","ErrorSnackBar","handleClose","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","useStyles","makeStyles","theme","createStyles","root","width","marginTop","ProgressLine","classes","LinearProgress","errorStyles","fontSize","bottom","left","ViewError","display","flexDirection","input","inputWrapper","marginBottom","validationSchema","Yup","email","required","password","max","Login","formik","useFormik","initialValues","rememberMe","onSubmit","values","errors","justify","handleSubmit","FormGroup","getFieldProps","touched","FormControlLabel","control","justifyContent","top","animationDuration","circle","strokeLinecap","CircularPreloader","CircularProgress","disableShrink","size","thickness","App","Container","fixed","exact","path","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.3a12c5bf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolist__name\":\"TodoList_todolist__name__2X1N4\"};","import { instance } from './settings'\n\nexport type TodolistType = {\n    id: string\n    addedDate: string\n    order: number\n    title: string\n}\n\nexport type ResponseType<T = {}> = {\n    resultCode: number\n    messages: Array<string>\n    fieldsErrors: Array<string>\n    data: T\n}\n\nexport enum TaskStasuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\n\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    High = 2,\n    Urgently = 3,\n    Later = 4 \n}\n\nexport type TaskItemType = {\n    description: string | null\n    title: string\n    status: TaskStasuses\n    priority: TaskPriorities\n    startDate: string | null\n    deadline: string | null\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\n\n\n// Для GET и PUT\nexport type TasksResponseType = {\n    error: null | string\n    totalCount: number\n    items: Array<TaskItemType>\n}\n\nexport type UpdateTaskModelType = {\n    title: string\n    description: string | null\n    status: TaskStasuses\n    priority: number\n    startDate: string | null\n    deadline: string | null\n}\n\n\n\nexport const todolistsAPI = {\n    getTodolists: () => {\n        return instance.get<Array<TodolistType>>('/todo-lists')\n    },\n    createTodolist: (title: string) => {\n        return instance.post<ResponseType<{item: TodolistType}>>('/todo-lists', {title})   \n    },\n    updateTodolist: (todoListId: string, title: string) => {\n        return instance.put<ResponseType>(`/todo-lists/${todoListId}`, {title})\n    },\n    deleteTodolist: (todoListId: string) => {\n        return instance.delete<ResponseType>(`/todo-lists/${todoListId}`)\n    },\n    createTask: (todoListId: string, title: string) => {\n        return instance.post<ResponseType<{item: TaskItemType}>>(`/todo-lists/${todoListId}/tasks`, {title}) \n    },\n    getTasks: (todoListId: string) => {\n        return instance.get<TasksResponseType>(`/todo-lists/${todoListId}/tasks`)  \n    },\n    updateTask: (todoListId: string, taskID: string, model: UpdateTaskModelType) => {\n        return instance.put<ResponseType<{item: UpdateTaskModelType}>>(`/todo-lists/${todoListId}/tasks/${taskID}`, model) \n    },\n    deleteTask: (todoListId: string, taskID: string) => {\n        return instance.delete<ResponseType>(`/todo-lists/${todoListId}/tasks/${taskID}`)   \n    }\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from 'axios'\n\nconst settings = {\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\n    withCredentials: true,\n    headers: {\n        'api-key': '1e60f3eb-a2f7-4f18-b8e9-f6ea4b15f04b'\n    }\n}\n\nexport const instance = axios.create(settings)","import { instance } from './settings'\nimport { ResponseType } from './todolists-api'\n\nexport type LoginParamsType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha?: string\n}\n\nexport const authAPI = {\n    login: (authData: LoginParamsType) => {\n        return instance.post<ResponseType<{userId: number}>>('/auth/login', authData)\n    },\n    logout: () => {\n        return instance.delete<ResponseType>('/auth/login')\n    },\n    authMe: () => {\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>('/auth/me')\n    }\n}","import { HandleAppNetworkError, HandleAppServerError } from './../helpers/error-handlers';\nimport { Dispatch } from \"redux\"\nimport { authAPI } from \"../api/auth-api\"\nimport { setIsLoggedInAC, SetLoggedInType } from \"./auth-reducer\"\n\n\n// Более компактная типизация\nconst initialState = {\n    status: 'idle' as StatusType,\n    error: null as null | string,\n    isInicialized: false as boolean\n}\n\ntype InitialStateType = typeof initialState\n\n\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType) => {\n    switch(action.type){\n        case 'app/SET_STATUS': \n            return {...state, status: action.status}\n\n        case 'app/SET_ERROR':\n            return {...state, error: action.error}  \n            \n        case 'app/SET_IS_INICIALIZED': \n            return {...state, isInicialized: action.isInicialized}\n\n        default: \n            return state\n    }\n}\n\n\n// actions\nexport const setAppStatusAC = (status: StatusType) => ({type: 'app/SET_STATUS', status} as const)\nexport const setAppErrorAC = (error: string | null) => ({type: 'app/SET_ERROR', error} as const)\nexport const setIsInicializedAC = (isInicialized: boolean) => ({type: 'app/SET_IS_INICIALIZED', isInicialized} as const)\n\n// thunk's\n\nexport const appInizializedTC = () => {\n    return (dispatch: Dispatch<AppActionsType>) => {\n        authAPI.authMe()\n        .then(({data}) => {\n            if(data.resultCode === 0){\n                dispatch(setIsLoggedInAC(true))\n            } else{\n                HandleAppServerError(data, dispatch)\n            }\n            dispatch(setIsInicializedAC(true))\n        })\n        .catch((error) => {\n            HandleAppNetworkError(error, dispatch)\n        })\n    }\n}\n\n// types\nexport type StatusType = 'idle' | 'success' | 'loading' | 'failed'\n\n// export type InitialAppReducerStateType = {\n//     status: StatusType\n//     error: string | null\n//     isInicialized: boolean\n// }\n\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\n\nexport type AppActionsType = \n| SetAppStatusActionType \n| SetAppErrorActionType \n| ReturnType<typeof setIsInicializedAC>\n| SetLoggedInType","import { SetAppStatusActionType, SetAppErrorActionType } from './../state/app-reducer';\nimport { setAppStatusAC } from '../state/app-reducer';\nimport { Dispatch } from 'redux';\nimport { setAppErrorAC } from '../state/app-reducer';\nimport { ResponseType } from '../api/todolists-api';\n\nexport const HandleAppServerError = <D>(data: ResponseType<D>, dispatch: Dispatch<ActionsType>) => {\n    if(data.messages.length){\n        dispatch(setAppErrorAC(data.messages[0]))\n    } else{\n        dispatch(setAppErrorAC('Some error'))\n    }\n    dispatch(setAppStatusAC('failed'))\n}\n\nexport const HandleAppNetworkError = (error: {message: string}, dispatch: Dispatch<ActionsType>) => {\n    dispatch(setAppErrorAC(error.message? error.message : 'Some error'))\n    dispatch(setAppStatusAC('failed'))\n}\n\ntype ActionsType = SetAppStatusActionType | SetAppErrorActionType","import { HandleAppNetworkError, HandleAppServerError } from '../helpers/error-handlers';\nimport { setAppStatusAC, SetAppStatusActionType, SetAppErrorActionType } from './app-reducer';\nimport { LoginParamsType } from '../api/auth-api';\nimport { authAPI } from \"../api/auth-api\"\nimport { Dispatch } from 'redux';\n\n\nconst initialState: InitialStateType = {\n    isLoggedIn: false\n}\n\nexport const authReducer = (state: InitialStateType = initialState, action: AuthActionsType) => {\n    switch(action.type){\n        case 'auth/SET_IS_LOGGED_IN': \n        return {\n            ...state,\n            isLoggedIn: action.isLoggedIn\n        }\n\n        default:\n            return state\n    }\n}\n\nexport const setIsLoggedInAC = (isLoggedIn: boolean) => ({type: 'auth/SET_IS_LOGGED_IN', isLoggedIn} as const)\n\n\nexport const loginTC = (authData: LoginParamsType) => {\n    return (dispatch: Dispatch<AuthActionsType>) => {\n        dispatch(setAppStatusAC('loading'))\n        authAPI.login(authData)\n        .then(({data}) => {\n            if(data.resultCode === 0){\n                dispatch(setIsLoggedInAC(true))\n                dispatch(setAppStatusAC('success'))\n                console.log(data)\n            } else {\n                HandleAppServerError(data, dispatch)\n            }\n        }) \n        .catch((error) => {\n            HandleAppNetworkError(error, dispatch)\n        })\n    }\n}\n\nexport const logoutTC = () => {\n    return (dispatch: Dispatch<AuthActionsType>) => {\n        authAPI.logout()\n        .then(({data}) => {\n            if(data.resultCode === 0){\n                dispatch(setIsLoggedInAC(false))\n            } else{\n                HandleAppServerError(data, dispatch)\n            }\n        })\n        .catch((error) => {\n            HandleAppNetworkError(error, dispatch)\n        })\n    }\n}\n\nexport type SetLoggedInType = ReturnType<typeof setIsLoggedInAC>\n\ntype AuthActionsType = \n| SetLoggedInType\n| SetAppStatusActionType\n| SetAppErrorActionType\n\n\ntype InitialStateType = {\n    isLoggedIn: boolean\n}","import { HandleAppNetworkError, HandleAppServerError } from './../helpers/error-handlers';\nimport { AppRootState } from './store';\nimport { TaskItemType, TaskStasuses, TaskPriorities, todolistsAPI, UpdateTaskModelType } from './../api/todolists-api';\nimport { AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType } from './todolists-reducer';\nimport { Dispatch } from 'redux';\nimport { setAppErrorAC, setAppStatusAC, SetAppStatusActionType, SetAppErrorActionType } from './app-reducer';\n\n\nexport type TasksStateType = {\n    [key: string]: Array<TaskItemType>\n  }\n\nconst initialState: TasksStateType = {\n    // [todolistID1]: [\n    //   {id: v1(), title: 'JS', isDone: true},\n    //   {id: v1(), title: 'ReactJS', isDone: true},\n    //   {id: v1(), title: 'ExpressJS', isDone: false},\n    //   {id: v1(), title: 'Typescript', isDone: false},\n    //   {id: v1(), title: 'HTML/CSS', isDone: true}],\n    //   [todolistID2]: [\n    //     {id: v1(), title: 'Milk', isDone: false},\n    //     {id: v1(), title: 'Book', isDone: true},\n    //     {id: v1(), title: 'Food for cat', isDone: false}]\n  }\n\n\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\n    switch(action.type){\n        case 'REMOVE_TASK': {\n            return {\n                ...state,\n                [action.todoListId]: state[action.todoListId].filter((task) => task.id !== action.taskID)\n            }\n        }\n\n        case 'ADD_TASK': {   // Добавляем новую таску пришедшую с сервера и раскладываем все предыдущие таски в массив\n            return {         // Внимание что приходит с сервера todoListId, а не todolisID\n                ...state,\n                [action.newTask.todoListId]: [action.newTask, ...state[action.newTask.todoListId]]\n            }\n        }\n\n        case 'UPDATE_TASK': {\n            return {\n                ...state,\n                [action.todoListId]: state[action.todoListId].map((task) => {\n                    if(task.id !== action.taskID){\n                        return task\n                    } else{\n                        return {...task, ...action.model}\n                    }\n                })\n            }\n        }\n\n        case 'ADD_TODOLIST': {\n            return {\n                ...state,\n                [action.todolist.id]: []\n            }\n        }\n\n        case 'REMOVE_TODOLIST': {\n            let copyState = {...state}  \n            delete copyState[action.todoListId] // Срабатывает только так \n            return copyState\n        }\n\n        case 'SET_TODOLISTS': {\n            let copyState = {...state}\n            action.todolists.forEach((td) => {\n                copyState[td.id] = []\n            })\n            return copyState\n        }\n\n        case 'SET_TASKS': {\n            return {...state, [action.todoListId]: action.tasks}\n        }\n\n        default:\n            return state\n    }\n}\n\n\n\n// actions\nexport const removeTaskAC = (todoListId: string, taskID: string) => ({type: 'REMOVE_TASK', todoListId, taskID} as const)\n\nexport const addTaskAC = (newTask: TaskItemType) => ({type: 'ADD_TASK', newTask} as const)\n\nexport const updateTaskAC = (todoListId: string, taskID: string, model: UpdateDomainTaskModelType) => ({type: 'UPDATE_TASK', todoListId, taskID, model} as const)\n\nexport const setTasksAC = (todoListId: string, tasks: Array<TaskItemType>) => ({type: 'SET_TASKS', todoListId, tasks} as const)\n\n\n// thunk's\nexport const fetchTasksTC = (todoListId: string) => {\n    return (dispatch: Dispatch<ActionsType>) => {\n        dispatch(setAppStatusAC('loading'))\n        todolistsAPI.getTasks(todoListId)\n        .then(({data}) => {\n            dispatch(setTasksAC(todoListId, data.items))\n            dispatch(setAppStatusAC('success'))\n        })\n    }\n}\n\nexport const removeTaskTC = (todoListId: string, taskID: string) => {\n    return (dispatch: Dispatch<ActionsType>) => {\n            todolistsAPI.deleteTask(todoListId, taskID)\n            .then(({data}) => {\n                if(data.resultCode === 0) {\n                dispatch(removeTaskAC(todoListId, taskID))\n            } else{\n                HandleAppServerError(data, dispatch)\n            }\n        })\n        .catch((error) => {\n            HandleAppNetworkError(error, dispatch) \n        })  \n    }\n}\n\nexport const AddTaskTC = (todoListId: string, title: string) => {\n    return (dispatch: Dispatch<ActionsType>) => {\n        dispatch(setAppStatusAC('loading'))\n        todolistsAPI.createTask(todoListId, title)\n        .then(({data}) => {\n            if(data.resultCode === 0){\n                dispatch(addTaskAC(data.data.item))\n                dispatch(setAppStatusAC('success'))\n            } else{\n                HandleAppServerError(data, dispatch) // Обработка ошибки если ответ 200, но есть resultCode отличный от 0\n            }\n        })\n        .catch((error) => {  // Обработка когда с сервера приходит ошибка (коды 400-500)\n            HandleAppNetworkError(error, dispatch) \n        })\n    }\n}\n\n\n// Делаем одну thunk'у на обновление чекбокса или названия таски (title)\n// domainModel - это то что будет приходить внутрь, необходимое для изменения на сервере.\n// Все остально для этой таски мы подтянем из state, достав эту таску для которой мы будем делать изменения.\n// Типы описали отдельно и с вопросительным знаком, чтобы могли передавать что угодно во внутрь, любую часть.\n\n\nexport const updateTaskTC = (todoListId: string, taskID: string, domainModel: UpdateDomainTaskModelType) => {\n    return (dispatch: Dispatch, getState: () => AppRootState) => {\n      \n    const state = getState()\n    const task = state.tasks[todoListId].find((task) => task.id === taskID)\n    \n    // Чтобы не ругался TS, что он может не найти task\n    if(!task){\n        throw new Error('task not found in state')\n    }\n\n    const modelApi: UpdateTaskModelType = {\n        title: task.title,\n        description: task.description,\n        status: task.status,\n        priority: task.priority,\n        startDate: task.startDate,\n        deadline: task.deadline,\n        ...domainModel  // Таким образом перезатираем свойства старой таски на новые (может перезатереться и \n                        // одно свойство, если мы в domainModel передадим одно свойство )\n    }\n\n    todolistsAPI.updateTask(todoListId, taskID, modelApi)\n        .then(({data}) => {\n            if(data.resultCode === 0){\n                dispatch(updateTaskAC(todoListId, taskID, domainModel)) \n            } else{\n                HandleAppServerError(data, dispatch) // Обработка ошибки если ответ 200, но есть resultCode отличный от 0\n            }\n        })\n        .catch((error) => {  // Обработка когда с сервера приходит ошибка (коды 400-500)\n            HandleAppNetworkError(error, dispatch)\n        })\n    }\n}\n\n\n// types\n\nexport type ActionsType = \nReturnType<typeof removeTaskAC>\n| ReturnType<typeof addTaskAC>\n| ReturnType<typeof updateTaskAC>\n| AddTodolistActionType \n| RemoveTodolistActionType\n| SetTodolistsActionType\n| ReturnType<typeof setTasksAC>\n| SetAppStatusActionType\n| SetAppErrorActionType\n\n\n\nexport type UpdateDomainTaskModelType = {\n    title?: string\n    description?: string | null\n    status?: TaskStasuses\n    priority?: number\n    startDate?: string | null\n    deadline?: string | null\n}","import { HandleAppServerError, HandleAppNetworkError } from './../helpers/error-handlers';\nimport { TodolistType, todolistsAPI } from './../api/todolists-api';\nimport { Dispatch } from 'redux';\nimport { setAppStatusAC, StatusType, SetAppStatusActionType, SetAppErrorActionType } from './app-reducer';\n\n\nconst initialState: Array<TodolistDomainType> = [\n    // {id: todolistID1, title: 'What to learn', filter: 'all'},\n    // {id: todolistID2, title: 'What to buy', filter: 'all'}\n]\n\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: TodolistActionsType): Array<TodolistDomainType> => {\n    switch(action.type){\n        case 'REMOVE_TODOLIST': \n            return state.filter((todolist) => todolist.id !== action.todoListId)  \n\n        case 'ADD_TODOLIST':\n            return [\n                {...action.todolist, filter: 'all', entityStatus: 'idle'},\n                ...state\n            ]\n        \n        case 'CHANGE_TODOLIST_TITLE':\n            return state.map((todolist) => todolist.id === action.todoListId ? {...todolist, title: action.newTodolistTitle} : todolist)\n\n        case 'CHANGE_TODOLIST_FILTER':\n            return state.map((todolist) => todolist.id === action.todoListId ? {...todolist, filter: action.filter} : todolist)\n        \n        case 'SET_TODOLISTS': \n            return action.todolists.map((td) => ({...td, filter: 'all', entityStatus: 'idle'}))\n        \n        case 'CHANGE_TODOLIST_ENTITY_STATUS': \n            return state.map((todolist) => todolist.id === action.todoListId ? {...todolist, entityStatus: action.entityStatus}: todolist)    \n        \n            default:\n            return state\n    }\n}\n\n\n\n// actions\nexport const removeTodolistAC = (todoListId: string) => ({type: 'REMOVE_TODOLIST', todoListId} as const)\n\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD_TODOLIST', todolist} as const)\n\nexport const changeTodolistTitleAC = (todoListId: string, newTodolistTitle: string) => ({type: 'CHANGE_TODOLIST_TITLE', todoListId, newTodolistTitle} as const)\n\nexport const changeTodolistFilterAC = (filter: FilterValuesType, todoListId: string) => ({type: 'CHANGE_TODOLIST_FILTER', filter, todoListId} as const)\n\n// Общий для двух редюсеров\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET_TODOLISTS', todolists} as const)\n// ========================\n\nexport const changeTodolistEntityStatusAC = (todoListId: string, entityStatus: StatusType) => ({type: 'CHANGE_TODOLIST_ENTITY_STATUS', todoListId, entityStatus} as const)\n\n\n// thunk's\nexport const fetchTodolistsTC = () => {\n    return (dispatch: Dispatch<TodolistActionsType>) => {\n        dispatch(setAppStatusAC('loading'))\n        todolistsAPI.getTodolists()\n        .then(({data}) => {\n          dispatch(setTodolistsAC(data))\n          dispatch(setAppStatusAC('success'))\n        })\n    }\n}\n\nexport const deleteTodolistTC = (todoListId: string) => {\n    return (dispatch: Dispatch<TodolistActionsType>) => {\n        dispatch(setAppStatusAC('loading'))\n        dispatch(changeTodolistEntityStatusAC(todoListId,'loading')) // Не нужно потом менять статус тудулиста, так как он удалится\n        todolistsAPI.deleteTodolist(todoListId)\n        .then(({data}) => {\n            if(data.resultCode === 0){\n                dispatch(removeTodolistAC(todoListId))\n                dispatch(setAppStatusAC('success'))\n            } else{\n                HandleAppServerError(data, dispatch)\n            }\n        })\n        .catch((error) => {\n            HandleAppNetworkError(error, dispatch)\n        })\n    }\n}\n\n\nexport const createTodolistTC = (newTitle: string) => {\n    return (dispatch: Dispatch<TodolistActionsType>) => {\n        dispatch(setAppStatusAC('loading'))\n        todolistsAPI.createTodolist(newTitle)\n        .then(({data}) => {\n            if(data.resultCode === 0){\n                dispatch(addTodolistAC(data.data.item))\n                dispatch(setAppStatusAC('success'))\n            } else{\n                HandleAppServerError(data, dispatch)\n            }\n        })\n        .catch((error) => {\n            HandleAppNetworkError(error, dispatch) \n        })\n    }\n}\n\nexport const updateTodolistTitleTC = (todoListId: string, title: string) => {\n    return (dispatch: Dispatch<TodolistActionsType>) => {\n        dispatch(setAppStatusAC('loading'))\n        todolistsAPI.updateTodolist(todoListId, title)\n        .then(({data}) => {\n            if(data.resultCode === 0){\n                dispatch(changeTodolistTitleAC(todoListId, title))\n                dispatch(setAppStatusAC('success'))\n            } else{\n                HandleAppServerError(data, dispatch)\n            }\n        })\n        .catch((error) => {\n            HandleAppNetworkError(error, dispatch) \n        })\n    }\n}\n\n// types\nexport type FilterValuesType = 'all' | 'active' | 'complited'\n\nexport type TodolistDomainType = TodolistType & {\n    filter: FilterValuesType\n    entityStatus: StatusType\n}\n\nexport type TodolistActionsType = \n| RemoveTodolistActionType \n| AddTodolistActionType  \n| ReturnType<typeof changeTodolistTitleAC>\n| ReturnType<typeof changeTodolistFilterAC>\n| SetTodolistsActionType\n| ReturnType<typeof changeTodolistEntityStatusAC>\n| SetAppStatusActionType\n| SetAppErrorActionType\n\n\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>\n\n\n\n\n\n","import { authReducer } from './auth-reducer';\nimport { appReducer } from './app-reducer';\nimport { tasksReducer } from './tasks-reducer';\nimport { todolistsReducer } from './todolists-reducer';\nimport { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport thunkMiddleware from 'redux-thunk'\n\nconst rootReducer = combineReducers({\n    todolists: todolistsReducer,\n    tasks: tasksReducer,\n    app: appReducer,\n    auth: authReducer\n})\n\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nexport type AppRootState = ReturnType<typeof rootReducer>\n\n\n// Можно было определить типы так, но это не удобно.\n// export type AppRootState = {\n//     todolists: Array<TodolistsType>\n//     tasks: TasksStateType\n// }\n\n\n//@ts-ignore\nwindow.store = store","import { AppBar, Button, IconButton, Toolbar, Typography } from '@material-ui/core'\nimport MenuIcon from '@material-ui/icons/Menu';\nimport React from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logoutTC } from '../state/auth-reducer';\nimport { AppRootState } from '../state/store';\n\nconst Header = () => {\n\n    const dispatch = useDispatch()\n    const isLoggedIn = useSelector<AppRootState, boolean>((state) => state.auth.isLoggedIn)\n\n    const onLogOutHandler = () => {\n        dispatch(logoutTC())\n    }\n\n    return (\n        <div>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                    <MenuIcon/>\n                    </IconButton>\n                    {isLoggedIn && <Button onClick={onLogOutHandler} color=\"inherit\">Log out</Button>}\n                </Toolbar>\n            </AppBar>\n        </div>\n    )\n}\n\nexport default Header\n","import { IconButton, TextField } from '@material-ui/core'\nimport { AddBox } from '@material-ui/icons'\nimport React from 'react'\nimport { StatusType } from '../../state/app-reducer'\n\nexport type AddItemPropsType = {\n    addItem: (inputValue: string) => void\n    disabled?: boolean\n}\n\nexport const AddItemForm: React.FC<AddItemPropsType> = (props) => {\n\n    console.log('AddItem render')\n\n    const [error, setError] = React.useState<string | null>(null)\n    const [value, setValue] = React.useState<string>('')  \n    \n    const onChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setError(null)\n        setValue(event.currentTarget.value)\n    }\n\n    const onPressKeyHandler = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        if(event.charCode === 13){\n            onAddItemHandler()\n        }\n    }\n\n    const onAddItemHandler = () => {\n        if(value.trim()){    \n            props.addItem(value.trim())\n            setValue('')\n        } else{\n            setError('Field is required')\n        }\n    }\n\n  return (\n    <>\n      <div>\n        <TextField\n          disabled={props.disabled}\n          variant='outlined'\n          type='text'\n          label='Title'\n          helperText={error}\n          error={!!error}\n          onChange={onChangeHandler}\n          onKeyPress={onPressKeyHandler}\n          value={value}/>\n        <IconButton color='primary' disabled={props.disabled} onClick={onAddItemHandler}>\n          <AddBox />\n        </IconButton>\n      </div>\n    </>\n  )\n}\n\nexport default React.memo(AddItemForm)","import { TextField } from '@material-ui/core'\nimport React from 'react'\nimport { StatusType } from '../../state/app-reducer'\n\ntype EditableSpanPropsType = {\n    title: string\n    changeItemTitle: (value: string) => void\n}\n\nconst EditableSpan: React.FC<EditableSpanPropsType> = (props) => {\n\n    console.log('EditableSpan render')\n\n    const [editMode, setEditMode] = React.useState<boolean>(false)\n    const [value, setValue] = React.useState<string>('')\n\n    const onInputChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setValue(event.currentTarget.value)\n    }\n\n    const onSpanClickHandler = () => {\n        setEditMode(true)\n        setValue(props.title)\n    }\n    const onBlurHandler = () => {\n        props.changeItemTitle(value)\n        setEditMode(false)\n    }\n\n    return (\n        <>\n        {editMode \n            ? <TextField\n            type='text' \n            autoFocus={true} \n            onChange={onInputChangeHandler} \n            onBlur={onBlurHandler}\n            value={value}   \n            />\n            : <span onDoubleClick={onSpanClickHandler}>{props.title}</span> \n        }\n        </>\n    )\n}\n\nexport default React.memo(EditableSpan)\n","import React, { useCallback } from 'react'\nimport EditableSpan from '../../../../components/EditableSpan/EditableSpan'\nimport { Checkbox, IconButton } from '@material-ui/core'\nimport { Delete } from '@material-ui/icons'\nimport { TaskItemType, TaskStasuses } from '../../../../api/todolists-api'\n\nexport type TaskPropsType = {\n    changeTaskTitle: (todoListId: string, taskID: string, title: string) => void\n    removeTask: (id: string, todoListId: string) => void\n    changeTaskStatus: (taskID: string, todoListId: string, status: TaskStasuses) => void\n    task: TaskItemType\n    todoListId: string\n}\n\nconst Task: React.FC<TaskPropsType> = (props) => {\n\n    const changeTaskTitle = useCallback((value: string) => { props.changeTaskTitle(props.todoListId, props.task.id, value)}, [props.changeTaskTitle, props.todoListId, props.task.id])\n\n    const onCrossClickHandler = useCallback(() => {props.removeTask(props.todoListId, props.task.id)}, [props.removeTask, props.todoListId, props.task.id])\n\n    const changeTaskStatusHandler = useCallback(() => {\n        props.changeTaskStatus(props.todoListId, props.task.id, props.task.status === TaskStasuses.Completed ? TaskStasuses.New : TaskStasuses.Completed)\n    }, [props.changeTaskStatus, props.todoListId, props.task.id, props.task.status])\n\n    return <div key={props.task.id} className={props.task.status === TaskStasuses.Completed ? 'is-done' : ''}>\n        <Checkbox \n        color='primary' \n        checked={props.task.status === TaskStasuses.Completed} \n        onChange={changeTaskStatusHandler}/>\n        <EditableSpan title={props.task.title} changeItemTitle={changeTaskTitle}/>\n        <IconButton onClick={onCrossClickHandler}>\n            <Delete />\n        </IconButton>\n    </div>            \n}\n\nexport default React.memo(Task)","import React, { useCallback, useEffect } from 'react'\nimport s from './TodoList.module.css'\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\nimport { Button, IconButton } from '@material-ui/core'\nimport { Delete } from '@material-ui/icons'\nimport Task from './Task/Task'\nimport EditableSpan from '../../../components/EditableSpan/EditableSpan'\nimport { FilterValuesType } from '../../../state/todolists-reducer'\nimport { TaskItemType, TaskStasuses, todolistsAPI } from '../../../api/todolists-api'\nimport { fetchTasksTC, setTasksAC } from '../../../state/tasks-reducer'\nimport { useDispatch } from 'react-redux'\nimport { StatusType } from '../../../state/app-reducer'\n\n\ntype PropsType = {\n    title: string\n    disabled: boolean\n    tasks: Array<TaskItemType>\n    removeTask: (id: string, todoListId: string) => void\n    changeFilter: (value: FilterValuesType, todoListId: string) => void\n    addTask: (todoListId: string, value: string,) => void\n    changeTaskStatus: (taskID: string, todoListId: string, status: TaskStasuses) => void\n    changeTaskTitle: (todoListId: string, taskID: string, title: string) => void\n    changeTodolistTitle: (todoListId: string, title: string) => void\n    filter: FilterValuesType\n    todoListId: string\n    removeTodolist: (todoListId: string) => void\n}\n\nconst TodoList: React.FC<PropsType> = (props) => {\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(fetchTasksTC(props.todoListId))\n    }, [])\n\n    const onRemoveTodolist = useCallback(() => { props.removeTodolist(props.todoListId)}, [props.changeFilter, props.todoListId])\n\n    const onAllClickHandler = useCallback(() => { props.changeFilter('all', props.todoListId)}, [props.changeFilter, props.todoListId])\n   \n    const onActiveClickHandler = useCallback(() => { props.changeFilter('active', props.todoListId)}, [props.changeFilter, props.todoListId])\n    \n    const onComplitedClickHandler = useCallback(() => { props.changeFilter('complited', props.todoListId)}, [props.changeFilter, props.todoListId])\n\n    const addTask = useCallback((inputValue: string) => { props.addTask(props.todoListId, inputValue)}, [props.addTask, props.todoListId])\n\n    const changeTodolistTitleHandler = useCallback((title: string) => { props.changeTodolistTitle(props.todoListId, title)}, [props.todoListId])\n\n    let tasks = props.tasks\n\n    if(props.filter === 'active'){\n        tasks = tasks.filter((task) => task.status === TaskStasuses.New)\n      }\n\n      if(props.filter === 'complited'){\n        tasks = tasks.filter((task) => task.status === TaskStasuses.Completed)\n      }\n\n\n    return (\n        <div className={s.todolist__block}>\n            <EditableSpan title={props.title} changeItemTitle={changeTodolistTitleHandler}/>\n            <IconButton disabled={props.disabled} onClick={onRemoveTodolist}>\n                <Delete />\n            </IconButton>\n            <AddItemForm disabled={props.disabled} addItem={addTask} />\n            \n                {tasks.map((task) => {\n                    return <Task\n                    key={task.id}\n                    changeTaskTitle={props.changeTaskTitle}\n                    removeTask={props.removeTask}\n                    changeTaskStatus={props.changeTaskStatus}\n                    task={task}\n                    todoListId={props.todoListId}\n                     />\n                })}\n            <div>\n                <Button color='default' variant={props.filter === 'all' ? 'outlined' : 'text'} onClick={onAllClickHandler}>All</Button>\n                <Button color='primary' variant={props.filter === 'active' ? 'outlined' : 'text'} onClick={onActiveClickHandler}>Active</Button>\n                <Button color='secondary' variant={props.filter === 'complited' ? 'outlined' : 'text'} onClick={onComplitedClickHandler}>Completed</Button>\n            </div>\n        </div>\n    )\n}\n\nexport default React.memo(TodoList)\n\n\n\n\n\n","import React, { useCallback, useEffect } from 'react';\nimport TodoList from './Todolist/TodoList';\nimport AddItemForm from '../../components/AddItemForm/AddItemForm';\nimport { Container, Grid, Paper } from '@material-ui/core';\nimport { changeTodolistFilterAC, removeTodolistAC, addTodolistAC, changeTodolistTitleAC, TodolistDomainType, FilterValuesType, setTodolistsAC, fetchTodolistsTC, deleteTodolistTC, createTodolistTC, updateTodolistTitleTC } from '../../state/todolists-reducer';\nimport { updateTaskAC, removeTaskTC, AddTaskTC, updateTaskTC, TasksStateType } from '../../state/tasks-reducer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppRootState } from '../../state/store';\nimport { TaskItemType, TaskStasuses, todolistsAPI } from '../../api/todolists-api';\nimport { Redirect } from 'react-router-dom';\n\n\n\nconst Todolists = () => {\n\n  const dispatch = useDispatch()\n\n  const todolists = useSelector<AppRootState, Array<TodolistDomainType>>((state) => state.todolists)\n  const tasks = useSelector<AppRootState, TasksStateType>((state) => state.tasks)\n  const isLoggedIn = useSelector<AppRootState, boolean>((state) => state.auth.isLoggedIn)\n\n  useEffect(() => {\n    if(!isLoggedIn){\n      return\n    }\n    dispatch(fetchTodolistsTC())\n  }, [])\n\n  \n  const removeTask = useCallback((todoListId: string, taskID: string) => {\n    dispatch(removeTaskTC(todoListId, taskID))    \n  }, [dispatch])\n  \n  const changeFilter = useCallback((filter: FilterValuesType, todoListId: string) => {\n    dispatch(changeTodolistFilterAC(filter, todoListId))\n  }, [dispatch])\n\n  const addTask = useCallback((todoListId: string, title: string) => {\n    dispatch(AddTaskTC(todoListId, title))\n  }, [dispatch])\n\n  const changeTaskStatus = useCallback((todoListId: string, taskID: string, status: TaskStasuses) => {\n    dispatch(updateTaskTC(todoListId, taskID, {status})) \n  }, [dispatch])                           \n\n  const removeTodolist = useCallback((todoListId: string) => {\n    dispatch(deleteTodolistTC(todoListId))\n  }, [dispatch])\n\n  const addNewTodolist = useCallback((newTitle: string) => {\n    dispatch(createTodolistTC(newTitle))\n  }, [dispatch])\n\n  const changeTaskTitle = useCallback((todoListId: string, taskID: string, title: string) => {\n    dispatch(updateTaskTC(todoListId, taskID, {title}))\n  }, [dispatch])\n  \n  const changeTodolistTitle = useCallback((todoListId: string, title: string) => {\n    dispatch(updateTodolistTitleTC(todoListId, title))\n  }, [dispatch])\n\n\n  if(!isLoggedIn){\n    return <Redirect to='/login' />\n  }\n\n\n  return (\n    <>\n      <Grid container style={{padding: '20px 20px 20px 0'}}>\n        <AddItemForm addItem={addNewTodolist}/>\n      </Grid>\n      <Grid container spacing={3}>\n      {todolists.map((tl) => {\n\n        let tasksForTodolist = tasks[tl.id];\n\n        return <Grid key={tl.id} item>\n          <Paper style={{padding: '10px'}}>\n            <TodoList \n              todoListId={tl.id}\n              disabled={tl.entityStatus === 'loading'}\n              title={tl.title} \n              tasks={tasksForTodolist} \n              removeTask={removeTask}\n              changeFilter={changeFilter}\n              changeTaskTitle={changeTaskTitle}\n              changeTodolistTitle={changeTodolistTitle}\n              addTask={addTask}\n              changeTaskStatus={changeTaskStatus}\n              filter={tl.filter}\n              removeTodolist={removeTodolist} />\n          </Paper>\n        </Grid>\n      })}\n      </Grid>\n      </>\n  );\n}\n\n\nexport default Todolists;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppRootState } from '../../state/store';\nimport { setAppErrorAC } from '../../state/app-reducer';\n\nfunction Alert(props: AlertProps) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction ErrorSnackBar() {\n  \n  const dispatch = useDispatch()\n  const error = useSelector((state: AppRootState) => state.app.error)  \n\n\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    dispatch(setAppErrorAC(null))\n  };\n\n  const isOpen = error !== null\n\n  return (\n    <div>\n      <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\n        <Alert severity=\"error\" onClose={handleClose}>{error}</Alert>\n      </Snackbar>\n    </div>\n  );\n}\n\nexport default ErrorSnackBar","import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n      '& > * + *': {\n        marginTop: theme.spacing(2),\n      },\n    },\n  }),\n);\n\nfunction ProgressLine() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <LinearProgress />\n    </div>\n  );\n}\n\nexport default ProgressLine","import React from 'react'\n\ntype ErrorMessagePropsType = {\n    error: string\n}\n\nconst errorStyles = {\n    fontSize: '14px',\n    color: 'red',\n    position: 'absolute' as const,\n    bottom: '-18px',\n    left: '0'\n}\n\nconst ViewError:React.FC<ErrorMessagePropsType> = ({error}) => {\n    return (\n        <div style={errorStyles}>\n            {error}\n        </div>\n    )\n}\n\nexport default ViewError\n","import React from 'react'\nimport TextField from '@material-ui/core/TextField';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport { ErrorMessage, useFormik } from 'formik';\nimport { Button, Checkbox, FormControlLabel, FormGroup, Grid  } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loginTC } from '../../state/auth-reducer';\nimport { AppRootState } from '../../state/store';\nimport { Redirect } from 'react-router-dom';\nimport * as Yup from 'yup'\nimport ViewError from '../../components/ViewMessage/ViewMessage';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      flexDirection: 'column',\n      width: '300px',\n    },\n    input: {\n        width: '100%'\n    },\n    inputWrapper: {\n        position: 'relative',\n        marginBottom: '20px'\n    }\n  }),\n);\n\nconst validationSchema = Yup.object({\n    email: Yup.string().email('Invalid email format').required('The field is required'),\n    password: Yup.string().required('The field is required').max(50, 'Password should be less than 50 symbols')\n})\n\n\nconst Login: React.FC = () => {\n\n    const dispatch = useDispatch()\n\n    const isLoggedIn = useSelector<AppRootState, boolean>((state) => state.auth.isLoggedIn)\n\n    const formik = useFormik({\n        initialValues: {\n            email: 'free@samuraijs.com',\n            password: 'free',\n            rememberMe: false\n        },\n        onSubmit: (values) => {\n            dispatch(loginTC(values))\n            console.log(formik.errors)\n        },\n        validationSchema: validationSchema\n    })\n\n    const classes = useStyles();\n\n    if(isLoggedIn){\n        return <Redirect to='/' />\n    }\n\n    return (\n        <div>  \n            <Grid container justify='center'>\n                <form onSubmit={formik.handleSubmit} className={classes.root}>\n                    <FormGroup>\n                    <div className={classes.inputWrapper}>\n                        <TextField\n                            id=\"standard-helperText\"\n                            className={classes.input}\n                            label=\"Email\"\n                            {...formik.getFieldProps('email')}\n                        />\n                        {formik.errors.email && formik.touched.email ? <ViewError error={formik.errors.email} /> : null}\n                    </div>\n                    <div className={classes.inputWrapper}>\n                        <TextField\n                            id=\"standard-helperText\"\n                            type='password'\n                            className={classes.input}\n                            label=\"Password\"\n                            {...formik.getFieldProps('password')}\n                        />\n                        {formik.errors.password && formik.touched.password ? <ViewError error={formik.errors.password} /> : null}\n                    </div>\n                    <FormControlLabel \n                    label='Remember me'\n                    control={\n                        <Checkbox color=\"primary\" {...formik.getFieldProps('rememberMe')}/>\n                    }/>\n                    <Button color=\"primary\" variant=\"contained\" type=\"submit\">\n                        Login\n                    </Button>\n                    </FormGroup>\n                </form>\n            </Grid>\n        </div>\n    )\n}\n\nexport default Login\n","import React from 'react';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      justifyContent: 'center',\n      marginTop: '38vh'\n    },\n    top: {\n      color: 'primary',\n      animationDuration: '550ms',\n    },\n    circle: {\n      strokeLinecap: 'round',\n    },\n  }),\n);\n\nconst CircularPreloader = () => {\n\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n        <CircularProgress\n            variant=\"indeterminate\"\n            disableShrink\n            className={classes.top}\n            classes={{\n            circle: classes.circle,\n            }}\n            size={80}\n            thickness={4}\n        />\n        </div>\n    )\n}\n\nexport default CircularPreloader\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport Header from '../components/Header';\nimport { Container } from '@material-ui/core';\nimport Todolists from '../pages/todolists/Todolists';\nimport ErrorSnackBar from '../components/ErrorSnackBar/ErrorSnackBar';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppRootState } from '../state/store';\nimport { StatusType } from '../state/app-reducer';\nimport ProgressLine from '../components/ProgressLine/ProgressLine';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport Login from '../pages/Login/Login';\nimport CircularPreloader from '../components/CircularPreloader/CircularPreloader';\nimport { appInizializedTC } from '../state/app-reducer'\n\n\nconst App = () => {\n\n  const dispatch = useDispatch()\n\n  const status = useSelector<AppRootState, StatusType>((state) => state.app.status)\n  const isInicialized = useSelector<AppRootState, Boolean>((state) => state.app.isInicialized)\n\n  useEffect(() => {\n      dispatch(appInizializedTC())\n  }, [])\n\n  if(!isInicialized){\n    return <CircularPreloader />\n  }\n\n  return (\n    <div>\n      <Router>\n        <Header />\n        {status === 'loading' && <ProgressLine />}\n          <Container fixed>\n            <Route exact path='/' render={() => <Todolists />}/> \n            <Route path='/login' render={() => <Login />}/> \n          </Container>\n          <ErrorSnackBar />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './state/store'\nimport App from './app/App';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  // </React.StrictMode>\n  ,document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}